package gluon

import (
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

const generatedByGluon = "// Code generated by GLUON DO NOT EDIT"

type Workspace struct {
	dir string
}

func NewWorkspace(dir string) *Workspace {
	return &Workspace{
		dir: dir,
	}
}

func (w *Workspace) Mkdir(name string) error {
	fname := filepath.Join(w.dir, name)
	err := os.MkdirAll(fname, os.ModePerm)
	if err != nil {
		return fmt.Errorf("failed to mkdir '%s':%w", fname, err)
	}
	return nil
}

func (w *Workspace) IsGoModuleRoot(name string) bool {
	fname := filepath.Join(w.dir, name, "go.mod")
	_, err := os.Stat(fname)
	return err == nil
}

func (w *Workspace) NewGoFile(dir string, f func(w *Writer) error) error {
	fname := filepath.Join(w.dir, lcase(dir), "gluon.generated.go")
	err := os.MkdirAll(filepath.Dir(fname), os.ModePerm)
	if err != nil {
		return fmt.Errorf("failed to create package dir '%s':%w", filepath.Dir(fname), err)
	}
	w.Debug("new go file '%s'", fname)
	writer := NewWriter()
	writer.Printf(generatedByGluon)
	writer.Printf("\n")
	pkgName := lcase(filepath.Base(filepath.Dir(fname)))
	writer.Printf("package %s\n\n", pkgName)
	err = f(writer)
	if err != nil {
		return err
	}
	formatted, err := format.Source([]byte(writer.String()))
	if err != nil {
		w.Debug(writer.String())
		return err
	}
	w.Debug(string(formatted))

	err = ioutil.WriteFile(fname, formatted, os.ModePerm)
	if err != nil {
		return fmt.Errorf("failed to write src file '%s':%w", fname, err)
	}
	return nil
}

func (w *Workspace) CreateGoModule(dir string, moduleName string) error {
	err := w.Mkdir(dir)
	if err != nil {
		return err
	}

	str, err := w.Execute(filepath.Join(w.dir, dir), "go", "mod", "init", moduleName)
	w.Debug(str)
	if err != nil {
		return fmt.Errorf("failed to execute: %w", err)
	}
	return nil
}

func (w *Workspace) Execute(dir string, name string, args ...string) (string, error) {
	w.Debug("$cd %s\n$%s %s", dir, name, join(" ", args...))
	cmd := exec.Command(name, args...)
	cmd.Env = os.Environ()
	cmd.Dir = dir
	res, err := cmd.CombinedOutput()
	return string(res), err
}

func (w *Workspace) Debug(format string, args ...interface{}) {
	fmt.Printf(format+"\n", args...)
}

// Clear removes all files with the gluon generated header
func (w *Workspace) Clear() error {
	w.Debug("clearing workspace '%s'", w.dir)
	err := os.MkdirAll(w.dir, os.ModePerm)
	if err != nil {
		return fmt.Errorf("cannot create workspace at '%s': %w", w.dir, err)
	}
	w.Debug("workspace '%s' exists", w.dir)
	err = filepath.Walk(w.dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.Mode().IsRegular() && strings.HasSuffix(path, ".go") {
			w.Debug("found go file '%s'", w.dir)
			b, err := w.isGluonGenerated(path)
			if err != nil {
				return fmt.Errorf("cannot read '%s': %w", path, err)
			}
			if b {
				err = os.Remove(path)
				if err != nil {
					return fmt.Errorf("cannot remove file '%s': %w", path, err)
				}
				w.Debug("gluon go file '%s' removed", w.dir)
			}
		}
		return nil
	})
	return err
}

func (w *Workspace) isGluonGenerated(fname string) (bool, error) {
	b, err := ioutil.ReadFile(fname)
	if err != nil {
		return false, err
	}
	src := string(b)
	return strings.Contains(src, generatedByGluon), nil
}
